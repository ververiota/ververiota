/**
 * @author datoccho
 * @you can edit creditss freely it's your right as long as you are not human if you are human don't change creditss
 */
module.exports.config = {
    name: `chanle`,
    version: `1.0.2`,
    hasPermssion: 0,
    creditss: `datoccho`,
    description: `a`,
    commandCategory: `Tr√≤ ch∆°i`,
    usages: `a`,
    cooldowns: 5
};
function isEven(n) {
    return n % 2 == 0;
}
function isOdd(n) {
    if (isEven(n)) {
        return false;
    } else {
        return true;
    }
}
module.exports.run = async ({ api, event, args, Currencies }) => {
    const { getData, increaseMoney, decreaseMoney } = Currencies;
    const { createReadStream } = require(`fs-extra`);
    const { threadID, messageID, senderID } = event;
    const axios = global.nodemodule[`axios`];
    const fs = global.nodemodule[`fs-extra`];
    const data = (await Currencies.getData(senderID)).data || {};
    const getRandomIntInclusive = (min, max) => {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    };
    var le = [`1`,`3`,`5`,`7`,`9`];
    var chan = [`2`,`4`,`6`,`8`,`10`];
    const sole = le[Math.floor(Math.random() * le.length)]
    const sochan = chan[Math.floor(Math.random() * chan.length)]
    var taixiucac = [`${sochan}`,`${sole}`];
    const rdm = taixiucac[Math.floor(Math.random() * taixiucac.length)]
    var answer;
    const money = (await getData(senderID)).money;
    var moneyBet = parseInt(args[1]);
    var thang = moneyBet * 2;
    const tax = thang * 5 / 100;
    const tong = thang - tax;
    switch(isOdd(parseInt(rdm))) {
                case true: answer = "l·∫ª";
                    break;
                case false: answer = "ch·∫µn";
                    break;
                default: return api.sendMessage("[ùêáùêãüåü] => L·ªói !",event.threadID);
            }
            if (!args[0]) return api.sendMessage("[ùêáùêãüåü] => B·∫•m /chanle [Ch·∫µn/L·∫ª] [ S·ªë Ti·ªÅn ]",event.threadID);
     var option;
          switch (args[0].toLowerCase()) {
                case "ch·∫µn": option = "ch·∫µn";
                    break;
                case "l·∫ª": option = "l·∫ª";
                    break;
                default: return api.sendMessage("B·∫•m /chanle + [Ch·∫µn/L·∫ª] + [ S·ªë Ti·ªÅn ]",event.threadID);    
            }
    if (isNaN(moneyBet) || moneyBet < 50)
        return api.sendMessage('S·ªë ti·ªÅn ƒë·∫∑t c∆∞·ª£c d∆∞·ªõi 50 ƒë√¥', threadID, messageID);
    if (moneyBet > money)
        return api.sendMessage('S·ªë d∆∞ c·ªßa b·∫°n kh√¥ng ƒë·ªß.', threadID, messageID);
            try {
        if (answer == option) {
            var resault = parseInt(args[1]) * 2;
            await Currencies.increaseMoney(event.senderID, resault);
                return api.sendMessage("K·∫øt Qu·∫£ L√†: " + rdm + " -> " + answer.toUpperCase() + `\nB·∫°n ch·ªçn: ${args[0].toLocaleLowerCase()} B·∫°n th·∫Øng` + "\nS·ªë Ti·ªÅn B·∫°n Nh·∫≠n ƒê∆∞·ª£c L√†: " + resault + `\nB·∫°n th·∫Øng v√† nh·∫≠n ƒë∆∞·ª£c ${thang}$\nV√† tr·ª´ ƒëi thu·∫ø 5% c·ªßa ${thang} l√† ${tax}\nSau khi tr·ª´ thu√™ s·ªë ti·ªÅn b·∫°n nh·∫≠n ƒë∆∞·ª£c l√† ${tong}\nS·ªë ti·ªÅn trong v√≠ c·ªßa b·∫°n l√†: ${money + tong}$`,
                 threadID, () => Currencies.increaseMoney(senderID, tong), messageID);
            } else {
            await Currencies.decreaseMoney(event.senderID, parseInt(args[1]));
                return api.sendMessage("B·∫°n ƒê√£ Thua V·ªõi K·∫øt Qu·∫£ L√† : " + rdm + " -> " + answer.toUpperCase() + `\nB·∫°n ch·ªçn: ${args[0].toLocaleLowerCase()} B·∫°n thua` + "\nS·ªë Ti·ªÅn B·∫°n M·∫•t L√†: " + parseInt(args[1]) + `\nS·ªë ti·ªÅn trong v√≠ c·ªßa b·∫°n l√†: ${money - moneyBet}$`, threadID, () => Currencies.decreaseMoney(senderID, moneyBet), messageID);
            } 
            }
    catch (e) {
        console.log(e);
    }
};